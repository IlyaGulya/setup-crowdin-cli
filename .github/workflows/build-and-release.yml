name: Build and Release Crowdin CLI Binaries

on:
  schedule:
    # Run every day at 00:00 UTC
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Crowdin CLI version to build (e.g. 3.16.0)'
        required: false
        type: string
      force:
        description: 'Force rebuild even if version already exists'
        required: false
        type: boolean
        default: false
      mark_as_latest:
        description: 'Mark this version as latest'
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_VERSION: '23'
  REPO_OWNER: ilyagulya
  REPO_NAME: setup-crowdin-cli

jobs:
  check-for-updates:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check-version.outputs.new_version }}
      version: ${{ steps.check-version.outputs.version }}
      mark_as_latest: ${{ github.event_name == 'schedule' || inputs.mark_as_latest || (github.event_name == 'workflow_dispatch' && inputs.version == '') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for new Crowdin CLI version
        id: check-version
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # language=js
          script: |
            const isManualRun = context.eventName === 'workflow_dispatch';
            const specifiedVersion = context.payload.inputs?.version;
            const forceRebuild = context.payload.inputs?.force === 'true';
            let version;
            
            // Determine which version to build
            if (isManualRun && specifiedVersion) {
              console.log(`Using manually specified version: ${specifiedVersion}`);
              version = specifiedVersion;
            } else {
              // Get the latest release from Crowdin CLI repository using Octokit
              console.log('Fetching latest Crowdin CLI version...');
              const { data: latestRelease } = await github.rest.repos.getLatestRelease({
                owner: 'crowdin',
                repo: 'crowdin-cli'
              });
              version = latestRelease.tag_name.replace(/^v/, '');
              console.log(`Latest Crowdin CLI version: ${version}`);
            }
            
            // Check if we already have this version in GitHub releases
            if (!forceRebuild) {
              console.log(`Checking if version ${version} already exists in GitHub releases...`);
              try {
                await github.rest.repos.getReleaseByTag({
                  owner: process.env.REPO_OWNER,
                  repo: process.env.REPO_NAME,
                  tag: version
                });
                
                console.log(`Version ${version} already exists in GitHub releases. Skipping.`);
                core.setOutput('new_version', 'false');
                return;
              } catch (error) {
                if (error.status !== 404) {
                  throw error;
                }
                // Release doesn't exist, continue
                console.log(`Version ${version} does not exist in GitHub releases.`);
              }
            } else {
              console.log(`Force rebuild is enabled. Will build version ${version} regardless of existing releases.`);
            }
            
            // Set outputs for the next jobs
            console.log(`Will build version: ${version}`);
            core.setOutput('new_version', 'true');
            core.setOutput('version', version);

  build-native:
    needs: check-for-updates
    if: ${{ needs.check-for-updates.outputs.new_version == 'true' }}
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            artifact: crowdin-cli-linux-amd64
          - runner: ubuntu-24.04-arm
            artifact: crowdin-cli-linux-arm64
          - runner: macos-latest
            artifact: crowdin-cli-macos-arm64
          - runner: macos-13
            artifact: crowdin-cli-macos-x86_64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Download and Extract Crowdin CLI
        # language=bash
        run: |
          VERSION=${{ needs.check-for-updates.outputs.version }}
          # Ensure VERSION has no 'v' prefix for consistency
          VERSION="${VERSION#v}"
          
          # Download the zip file (adding 'v' prefix for URL)
          echo "Downloading Crowdin CLI zip for version ${VERSION}..."
          curl -L -o crowdin-cli.zip "https://github.com/crowdin/crowdin-cli/releases/download/${VERSION}/crowdin-cli.zip"
          unzip -j crowdin-cli.zip
                    
          # Verify the JAR file was moved successfully
          if [ ! -f crowdin-cli.jar ]; then
            echo "ZIP does not contain crowdin-cli.jar"
            exit 1
          fi
          
          echo "Successfully extracted crowdin-cli.jar"

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run AWT Stripper
        # language=bash
        run: |
          # Run the stripper to remove AWT calls
          echo "Running AWT stripper to remove AWT calls from the JAR..."
          cd stripper
          ./gradlew run --args "../crowdin-cli.jar ../crowdin-cli-stripped.jar"
          cd ..
          
          # Verify the stripped JAR was created successfully
          if [ ! -f crowdin-cli-stripped.jar ]; then
            echo "Failed to create stripped JAR file"
            exit 1
          fi
          
          echo "Successfully created stripped JAR file"

      - name: Compile and package reflection feature
        # language=bash
        run: |
          # Create output directory
          mkdir -p out
          
          # Compile the reflection feature
          javac -cp crowdin-cli-stripped.jar -d out CrowdinReflectionFeature.java
          
          # Package the feature into a JAR
          jar cf feature.jar -C out .
          
          echo "Successfully compiled and packaged reflection feature"

      - name: Build native image
        # language=bash
        run: |
          native-image \
            -Os \
            -cp feature.jar:crowdin-cli-stripped.jar \
            -H:Features=CrowdinReflectionFeature \
            -H:IncludeResources="META-INF/services/.*|crowdin.*|messages/.*" \
            --no-fallback \
            --enable-url-protocols=http,https \
            com.crowdin.cli.Cli \
            ${{ matrix.artifact }}

      - name: Test Crowdin CLI
        run: |
          chmod +x ./${{ matrix.artifact }}
          cd testproject
          
          echo "Testing download sources..."
          ../${{ matrix.artifact }} download sources
          
          echo "Testing download translations..."
          ../${{ matrix.artifact }} download translations
          
          echo "Testing upload sources..."
          ../${{ matrix.artifact }} upload sources
          
          echo "Testing upload translations..."
          ../${{ matrix.artifact }} upload translations
        env:
          CROWDIN_PERSONAL_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ vars.CROWDIN_PROJECT_ID }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}

  create-release:
    needs: [check-for-updates, build-native]
    if: ${{ needs.check-for-updates.outputs.new_version == 'true' }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries
          merge-multiple: false

      - name: Create version branch and tag
        # language=bash
        run: |
          VERSION="${{ needs.check-for-updates.outputs.version }}"
          MARK_AS_LATEST="${{ needs.check-for-updates.outputs.mark_as_latest }}"
          
          # Configure Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create an orphan branch for this version
          git checkout --orphan binaries-$VERSION
          
          # Remove everything from the branch
          git rm -rf .
          
          # Create version file
          echo "$VERSION" > .crowdin-version
          
          # Commit and tag
          git add .crowdin-version
          git commit -m "Release Crowdin CLI v$VERSION"
          git tag $VERSION
          
          # Push the tag to the repository
          git push --force origin $VERSION          

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-for-updates.outputs.version }}
          name: Crowdin CLI v${{ needs.check-for-updates.outputs.version }}
          body: |
            Crowdin CLI v${{ needs.check-for-updates.outputs.version }} native binaries
            
            These are native binaries built from the official Crowdin CLI JAR using GraalVM.
            AWT dependencies have been removed to reduce binary size and improve compatibility.
          draft: false
          prerelease: false
          make_latest: ${{ needs.check-for-updates.outputs.mark_as_latest }}
          files: |
            binaries/crowdin-cli-linux-amd64/crowdin-cli-linux-amd64
            binaries/crowdin-cli-linux-arm64/crowdin-cli-linux-arm64
            binaries/crowdin-cli-macos-arm64/crowdin-cli-macos-arm64
            binaries/crowdin-cli-macos-x86_64/crowdin-cli-macos-x86_64
          fail_on_unmatched_files: true
